# -*- coding: utf-8 -*-
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe CharactersController do
  describe "GET index" do
    it "assigns all characters as @characters" do
      Character.stub(:all) { [mock_character] }
      get :index
      assigns(:characters).should eq([mock_character])
    end
  end

  describe "GET show" do
    it "assigns the requested character as @character" do
      Character.stub(:find).with("37") { mock_character }
      get :show, :id => "37"
      assigns(:character).should be(mock_character)
    end
  end

  describe "GET new" do
    it "assigns a new character as @character" do
      Character.stub(:new) { mock_character }
      get :new
      assigns(:character).should be(mock_character)
    end
  end

  describe "GET edit" do
    it "NoMethodError" do
      Character.stub(:find).with("37") { mock_character }
      lambda {
        get :edit, :id => "37"
      }.should raise_error(NoMethodError)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created character as @character" do
        Character.stub(:new).with({'these' => 'params'}) { mock_character(:save => true) }
        post :create, :character => {'these' => 'params'}
        assigns(:character).should be(mock_character)
      end

      it "redirects to the created character" do
        Character.stub(:new) { mock_character(:save => true) }
        post :create, :character => {}
        response.should redirect_to(character_url(mock_character))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved character as @character" do
        Character.stub(:new).with({'these' => 'params'}) { mock_character(:save => false) }
        post :create, :character => {'these' => 'params'}
        assigns(:character).should be(mock_character)
      end

      it "re-renders the 'new' template" do
        Character.stub(:new) { mock_character(:save => false) }
        post :create, :character => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    it "NoMethodError" do
      Character.stub(:find).with("37") { mock_character(:update_attributes => true) }
      lambda {
        put :update, :id => "37", :character => {}
      }.should raise_error(NoMethodError)
    end
  end

  describe "DELETE destroy" do
    it "NoMethodError" do
      Character.stub(:find).with("37") { mock_character(:destroy => true) }
      lambda {
        delete :destory, :id => "37"
      }.should raise_error(NoMethodError)
    end
  end
end
